"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/XVvYFFkXPRF
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from "@/components/ui/dropdown-menu";
import Link from "next/link";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import React, { useState } from "react";
import { Modal, DatePicker, Select as AntdSelect, Form } from "antd";
import moment from "moment";

// タスクの型定義
interface Task {
  id: number;
  name: string;
  assignee: string;
  dueDate: string;
  status: string;
}

export function Component() {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [editingTask, setEditingTask] = useState<Task | null>(null);
  const [isDeleteModalVisible, setIsDeleteModalVisible] = useState(false);
  const [taskToDelete, setTaskToDelete] = useState<Task | null>(null);
  const [form] = Form.useForm();
  const [tasks, setTasks] = useState<Task[]>([
    {
      id: 1,
      name: "プロジェクト計画書の作成",
      assignee: "山田太郎",
      dueDate: "2023-07-15",
      status: "未完了",
    },
    {
      id: 2,
      name: "クライアントミーティング",
      assignee: "佐藤花子",
      dueDate: "2023-07-20",
      status: "進行中",
    },
    {
      id: 3,
      name: "バグ修正",
      assignee: "鈴木一郎",
      dueDate: "2023-07-10",
      status: "完了",
    },
  ]);
  const [selectedStatus, setSelectedStatus] = useState<string>("all");

  // フォームの初期値を設定
  const initialValues = {
    taskName: "",
    assignee: "",
    dueDate: null,
    status: "未着手",
  };

  const showModal = (task?: Task | React.MouseEvent) => {
    if (task && "id" in task) {
      setIsEditMode(true);
      setEditingTask(task);
      form.setFieldsValue({
        taskName: task.name,
        assignee: task.assignee,
        dueDate: moment(task.dueDate),
        status: task.status,
      });
    } else {
      setIsEditMode(false);
      setEditingTask(null);
      form.setFieldsValue(initialValues);
    }
    setIsModalVisible(true);
  };

  const handleOk = () => {
    form
      .validateFields()
      .then((values) => {
        if (isEditMode && editingTask) {
          // 既存のタスクを更新
          const updatedTasks = tasks.map((task) =>
            task.id === editingTask.id
              ? {
                  ...task,
                  name: values.taskName,
                  assignee: values.assignee,
                  dueDate: values.dueDate.format("YYYY-MM-DD"),
                  status: values.status,
                }
              : task
          );
          setTasks(updatedTasks);
        } else {
          // 新しいタスクを作成
          const newTask: Task = {
            id: Date.now(),
            name: values.taskName,
            assignee: values.assignee,
            dueDate: values.dueDate.format("YYYY-MM-DD"),
            status: values.status,
          };
          setTasks([...tasks, newTask]);
        }
        setIsModalVisible(false);
        form.resetFields();
      })
      .catch((info) => {
        console.log("バリデーション失敗:", info);
      });
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
  };

  const showDeleteModal = (task: Task) => {
    setTaskToDelete(task);
    setIsDeleteModalVisible(true);
  };

  const handleDeleteOk = () => {
    if (taskToDelete) {
      const updatedTasks = tasks.filter((task) => task.id !== taskToDelete.id);
      setTasks(updatedTasks);
    }
    setIsDeleteModalVisible(false);
  };

  const handleDeleteCancel = () => {
    setIsDeleteModalVisible(false);
  };

  // タスクの状態ごとの数を計算
  const taskCounts = {
    未完了: tasks.filter((task) => task.status === "未完了").length,
    進行中: tasks.filter((task) => task.status === "進行中").length,
    完了: tasks.filter((task) => task.status === "完了").length,
  };

  // フィルタリングされたタスクリストを取得する関数
  const getFilteredTasks = () => {
    if (selectedStatus === "all") {
      return tasks;
    }
    return tasks.filter((task) => task.status === selectedStatus);
  };

  // ステータス選択時の処理
  const handleStatusChange = (value: string) => {
    setSelectedStatus(value);
  };

  return (
    <div className="flex flex-col h-screen">
      <header className="bg-primary text-primary-foreground p-4 flex items-center justify-between shadow-md">
        <h1 className="text-2xl font-bold">タスク管理アプリ</h1>
        <div className="flex items-center gap-4">
          <Button size="sm" className="flex items-center gap-2" onClick={() => showModal()}>
            <PlusIcon className="h-5 w-5" />
            新しいタスク
          </Button>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="hover:bg-muted">
                <MenuIcon className="h-5 w-5" />
                <span className="sr-only">マスター管理</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>
                <Link href="#" className="flex items-center gap-2 text-muted-foreground hover:text-foreground" prefetch={false}>
                  <UsersIcon className="h-5 w-5" />
                  担当者マスター
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Link href="#" className="flex items-center gap-2 text-muted-foreground hover:text-foreground" prefetch={false}>
                  <TagIcon className="h-5 w-5" />
                  タグマスター
                </Link>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <div />
        </div>
      </header>
      <main className="flex-1 grid grid-cols-[1fr] gap-8 p-8">
        <div className="bg-card rounded-lg p-6 space-y-6 shadow-md">
          <div>
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-medium">タスクリスト</h2>
              <div className="flex items-center gap-4">
                <Select onValueChange={handleStatusChange} value={selectedStatus}>
                  <SelectTrigger className="bg-background hover:bg-muted transition-colors">
                    <SelectValue placeholder="ステータス" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">全て</SelectItem>
                    <SelectItem value="未完了">未完了</SelectItem>
                    <SelectItem value="進行中">進行中</SelectItem>
                    <SelectItem value="完了">完了</SelectItem>
                  </SelectContent>
                </Select>
                <Input type="search" placeholder="タスクを検索..." className="max-w-xs bg-background hover:bg-muted transition-colors" />
              </div>
            </div>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>タスク名</TableHead>
                  <TableHead>担当者</TableHead>
                  <TableHead>期限</TableHead>
                  <TableHead>ステータス</TableHead>
                  <TableHead>操作</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {getFilteredTasks().map((task) => (
                  <TableRow key={task.id}>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <ClipboardListIcon className="h-5 w-5 text-primary" />
                        <span>{task.name}</span>
                      </div>
                    </TableCell>
                    <TableCell>{task.assignee}</TableCell>
                    <TableCell>{task.dueDate}</TableCell>
                    <TableCell>
                      <Badge variant="outline" className={`bg-${getBadgeColor(task.status)}-100 text-${getBadgeColor(task.status)}-800`}>
                        {task.status}
                      </Badge>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Button variant="ghost" size="icon" className="hover:bg-muted" onClick={() => showModal(task)}>
                          <FilePenIcon className="h-5 w-5" />
                        </Button>
                        <Button variant="ghost" size="icon" className="hover:bg-muted" onClick={() => showDeleteModal(task)}>
                          <TrashIcon className="h-5 w-5" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
          <div>
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-medium">タスク進捗</h2>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
              <Card>
                <CardHeader>
                  <CardTitle>未完了</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-4xl font-bold">{taskCounts.未完了}</div>
                      <div className="text-muted-foreground">件</div>
                    </div>
                    <div className="text-primary">
                      <ClipboardListIcon className="h-8 w-8" />
                    </div>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>進行中</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-4xl font-bold">{taskCounts.進行中}</div>
                      <div className="text-muted-foreground">件</div>
                    </div>
                    <div className="text-yellow-500">
                      <ClipboardListIcon className="h-8 w-8" />
                    </div>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader>
                  <CardTitle>完了</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-4xl font-bold">{taskCounts.完了}</div>
                      <div className="text-muted-foreground">件</div>
                    </div>
                    <div className="text-green-500">
                      <ClipboardCheckIcon className="h-8 w-8" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </main>
      <Modal title={isEditMode ? "タスクの編集" : "新しいタスクの作成"} open={isModalVisible} onOk={handleOk} onCancel={handleCancel}>
        <Form form={form} layout="vertical" initialValues={initialValues}>
          <Form.Item name="taskName" label="タスク名" rules={[{ required: true, message: "タスク名を入力してください" }]}>
            <Input />
          </Form.Item>
          <Form.Item name="assignee" label="担当者" rules={[{ required: true, message: "担当者を入力してください" }]}>
            <Input />
          </Form.Item>
          <Form.Item name="dueDate" label="期限" rules={[{ required: true, message: "期限を選択してください" }]}>
            <DatePicker style={{ width: "100%" }} />
          </Form.Item>
          <Form.Item name="status" label="ステータス" rules={[{ required: true, message: "ステータスを選択してください" }]}>
            <AntdSelect>
              <AntdSelect.Option value="未着手">未着手</AntdSelect.Option>
              <AntdSelect.Option value="進行中">進行中</AntdSelect.Option>
              <AntdSelect.Option value="完了">完了</AntdSelect.Option>
            </AntdSelect>
          </Form.Item>
        </Form>
      </Modal>
      <Modal title="タスクの削除" open={isDeleteModalVisible} onOk={handleDeleteOk} onCancel={handleDeleteCancel} okText="削除" cancelText="キャンセル">
        <p>本当にこのタスクを削除しますか？</p>
      </Modal>
    </div>
  );
}

// ステータスに応じてバッジの色を返す関数
function getBadgeColor(status: string): string {
  switch (status) {
    case "未着手":
      return "blue";
    case "進行中":
      return "yellow";
    case "完了":
      return "green";
    default:
      return "gray";
  }
}

function ClipboardCheckIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <rect width="8" height="4" x="8" y="2" rx="1" ry="1" />
      <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
      <path d="m9 14 2 2 4-4" />
    </svg>
  );
}

function ClipboardListIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <rect width="8" height="4" x="8" y="2" rx="1" ry="1" />
      <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" />
      <path d="M12 11h4" />
      <path d="M12 16h4" />
      <path d="M8 11h.01" />
      <path d="M8 16h.01" />
    </svg>
  );
}

function FilePenIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v10" />
      <path d="M14 2v4a2 2 0 0 0 2 2h4" />
      <path d="M10.4 12.6a2 2 0 1 1 3 3L8 21l-4 1 1-4Z" />
    </svg>
  );
}

function MenuIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <line x1="4" x2="20" y1="12" y2="12" />
      <line x1="4" x2="20" y1="6" y2="6" />
      <line x1="4" x2="20" y1="18" y2="18" />
    </svg>
  );
}

function PlusIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function TagIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z" />
      <circle cx="7.5" cy="7.5" r=".5" fill="currentColor" />
    </svg>
  );
}

function TrashIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  );
}

function UsersIcon(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg {...props} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
      <circle cx="9" cy="7" r="4" />
      <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
      <path d="M16 3.13a4 4 0 0 1 0 7.75" />
    </svg>
  );
}
